################################################################################
#
# Makefile project only supported on Mac OS X and Linux Platforms)
#
################################################################################

# Location of the CUDA Toolkit
CUDA_PATH ?= /usr/local/cuda-11.8

##############################
# start deprecated interface #
##############################
ifeq ($(x86_64),1)
    $(info WARNING - x86_64 variable has been deprecated)
    $(info WARNING - please use TARGET_ARCH=x86_64 instead)
    TARGET_ARCH ?= x86_64
endif
ifeq ($(ARMv7),1)
    $(info WARNING - ARMv7 variable has been deprecated)
    $(info WARNING - please use TARGET_ARCH=armv7l instead)
    TARGET_ARCH ?= armv7l
endif
ifeq ($(aarch64),1)
    $(info WARNING - aarch64 variable has been deprecated)
    $(info WARNING - please use TARGET_ARCH=aarch64 instead)
    TARGET_ARCH ?= aarch64
endif
ifeq ($(ppc64le),1)
    $(info WARNING - ppc64le variable has been deprecated)
    $(info WARNING - please use TARGET_ARCH=ppc64le instead)
    TARGET_ARCH ?= ppc64le
endif
ifneq ($(GCC),)
    $(info WARNING - GCC variable has been deprecated)
    $(info WARNING - please use HOST_COMPILER=$(GCC) instead)
    HOST_COMPILER ?= $(GCC)
endif
ifneq ($(abi),)
    $(error ERROR - abi variable has been removed)
endif
############################
# end deprecated interface #
############################

# architecture
HOST_ARCH   := $(shell uname -m)
TARGET_ARCH ?= $(HOST_ARCH)
ifneq (,$(filter $(TARGET_ARCH),x86_64 aarch64 sbsa ppc64le armv7l))
    ifneq ($(TARGET_ARCH),$(HOST_ARCH))
        ifneq (,$(filter $(TARGET_ARCH),x86_64 aarch64 sbsa ppc64le))
            TARGET_SIZE := 64
        else ifneq (,$(filter $(TARGET_ARCH),armv7l))
            TARGET_SIZE := 32
        endif
    else
        TARGET_SIZE := $(shell getconf LONG_BIT)
    endif
else
    $(error ERROR - unsupported value $(TARGET_ARCH) for TARGET_ARCH!)
endif

# sbsa and aarch64 systems look similar. Need to differentiate them at host level for now.
ifeq ($(HOST_ARCH),aarch64)
    ifeq ($(CUDA_PATH)/targets/sbsa-linux,$(shell ls -1d $(CUDA_PATH)/targets/sbsa-linux 2>/dev/null))
        HOST_ARCH := sbsa
        TARGET_ARCH := sbsa
    endif
endif

ifneq ($(TARGET_ARCH),$(HOST_ARCH))
    ifeq (,$(filter $(HOST_ARCH)-$(TARGET_ARCH),aarch64-armv7l x86_64-armv7l x86_64-aarch64 x86_64-sbsa x86_64-ppc64le))
        $(error ERROR - cross compiling from $(HOST_ARCH) to $(TARGET_ARCH) is not supported!)
    endif
endif

# When on native aarch64 system with userspace of 32-bit, change TARGET_ARCH to armv7l
ifeq ($(HOST_ARCH)-$(TARGET_ARCH)-$(TARGET_SIZE),aarch64-aarch64-32)
    TARGET_ARCH = armv7l
endif

# operating system
HOST_OS   := $(shell uname -s 2>/dev/null | tr "[:upper:]" "[:lower:]")
TARGET_OS ?= $(HOST_OS)
ifeq (,$(filter $(TARGET_OS),linux darwin qnx android))
    $(error ERROR - unsupported value $(TARGET_OS) for TARGET_OS!)
endif

# host compiler
ifeq ($(TARGET_OS),darwin)
    ifeq ($(shell expr `xcodebuild -version | grep -i xcode | awk '{print $$2}' | cut -d'.' -f1` \>= 5),1)
        HOST_COMPILER ?= clang++
    endif
else ifneq ($(TARGET_ARCH),$(HOST_ARCH))
    ifeq ($(HOST_ARCH)-$(TARGET_ARCH),x86_64-armv7l)
        ifeq ($(TARGET_OS),linux)
            HOST_COMPILER ?= arm-linux-gnueabihf-g++
        else ifeq ($(TARGET_OS),qnx)
            ifeq ($(QNX_HOST),)
                $(error ERROR - QNX_HOST must be passed to the QNX host toolchain)
            endif
            ifeq ($(QNX_TARGET),)
                $(error ERROR - QNX_TARGET must be passed to the QNX target toolchain)
            endif
            export QNX_HOST
            export QNX_TARGET
            HOST_COMPILER ?= $(QNX_HOST)/usr/bin/arm-unknown-nto-qnx6.6.0eabi-g++
        else ifeq ($(TARGET_OS),android)
            HOST_COMPILER ?= arm-linux-androideabi-g++
        endif
    else ifeq ($(TARGET_ARCH),aarch64)
        ifeq ($(TARGET_OS), linux)
            HOST_COMPILER ?= aarch64-linux-gnu-g++
        else ifeq ($(TARGET_OS),qnx)
            ifeq ($(QNX_HOST),)
                $(error ERROR - QNX_HOST must be passed to the QNX host toolchain)
            endif
            ifeq ($(QNX_TARGET),)
                $(error ERROR - QNX_TARGET must be passed to the QNX target toolchain)
            endif
            export QNX_HOST
            export QNX_TARGET
            HOST_COMPILER ?= $(QNX_HOST)/usr/bin/q++
        else ifeq ($(TARGET_OS), android)
            HOST_COMPILER ?= aarch64-linux-android-clang++
        endif
    else ifeq ($(TARGET_ARCH),sbsa)
        HOST_COMPILER ?= aarch64-linux-gnu-g++
    else ifeq ($(TARGET_ARCH),ppc64le)
        HOST_COMPILER ?= powerpc64le-linux-gnu-g++
    endif
endif
HOST_COMPILER ?= g++
NVCC          := $(CUDA_PATH)/bin/nvcc -ccbin $(HOST_COMPILER)

# internal flags
NVCCFLAGS   := -m${TARGET_SIZE}
CCFLAGS     :=
LDFLAGS     :=

# build flags
ifeq ($(TARGET_OS),darwin)
    LDFLAGS += -rpath $(CUDA_PATH)/lib
    CCFLAGS += -arch $(HOST_ARCH)
else ifeq ($(HOST_ARCH)-$(TARGET_ARCH)-$(TARGET_OS),x86_64-armv7l-linux)
    LDFLAGS += --dynamic-linker=/lib/ld-linux-armhf.so.3
    CCFLAGS += -mfloat-abi=hard
else ifeq ($(TARGET_OS),android)
    LDFLAGS += -pie
    CCFLAGS += -fpie -fpic -fexceptions
endif

ifneq ($(TARGET_ARCH),$(HOST_ARCH))
    ifeq ($(TARGET_ARCH)-$(TARGET_OS),armv7l-linux)
        ifneq ($(TARGET_FS),)
            GCCVERSIONLTEQ46 := $(shell expr `$(HOST_COMPILER) -dumpversion` \<= 4.6)
            ifeq ($(GCCVERSIONLTEQ46),1)
                CCFLAGS += --sysroot=$(TARGET_FS)
            endif
            LDFLAGS += --sysroot=$(TARGET_FS)
            LDFLAGS += -rpath-link=$(TARGET_FS)/lib
            LDFLAGS += -rpath-link=$(TARGET_FS)/usr/lib
            LDFLAGS += -rpath-link=$(TARGET_FS)/usr/lib/arm-linux-gnueabihf
        endif
    endif
    ifeq ($(TARGET_ARCH)-$(TARGET_OS),aarch64-linux)
        ifneq ($(TARGET_FS),)
            GCCVERSIONLTEQ46 := $(shell expr `$(HOST_COMPILER) -dumpversion` \<= 4.6)
            ifeq ($(GCCVERSIONLTEQ46),1)
                CCFLAGS += --sysroot=$(TARGET_FS)
            endif
            LDFLAGS += --sysroot=$(TARGET_FS)
            LDFLAGS += -rpath-link=$(TARGET_FS)/lib -L$(TARGET_FS)/lib
            LDFLAGS += -rpath-link=$(TARGET_FS)/lib/aarch64-linux-gnu -L$(TARGET_FS)/lib/aarch64-linux-gnu
            LDFLAGS += -rpath-link=$(TARGET_FS)/usr/lib -L$(TARGET_FS)/usr/lib
            LDFLAGS += -rpath-link=$(TARGET_FS)/usr/lib/aarch64-linux-gnu -L$(TARGET_FS)/usr/lib/aarch64-linux-gnu
            LDFLAGS += --unresolved-symbols=ignore-in-shared-libs
            CCFLAGS += -isystem=$(TARGET_FS)/usr/include -I$(TARGET_FS)/usr/include -I$(TARGET_FS)/usr/include/libdrm
            CCFLAGS += -isystem=$(TARGET_FS)/usr/include/aarch64-linux-gnu -I$(TARGET_FS)/usr/include/aarch64-linux-gnu
        endif
    endif
    ifeq ($(TARGET_ARCH)-$(TARGET_OS),aarch64-qnx)
        NVCCFLAGS += -D_QNX_SOURCE
        NVCCFLAGS += --qpp-config 8.3.0,gcc_ntoaarch64le
        CCFLAGS += -DWIN_INTERFACE_CUSTOM -I/usr/include/aarch64-qnx-gnu
        LDFLAGS += -lsocket
        LDFLAGS += -L/usr/lib/aarch64-qnx-gnu
        CCFLAGS += "-Wl\,-rpath-link\,/usr/lib/aarch64-qnx-gnu"
        ifdef TARGET_OVERRIDE
            LDFLAGS += -lslog2
        endif

        ifneq ($(TARGET_FS),)
            LDFLAGS += -L$(TARGET_FS)/usr/lib
            CCFLAGS += "-Wl\,-rpath-link\,$(TARGET_FS)/usr/lib"
            LDFLAGS += -L$(TARGET_FS)/usr/libnvidia
            CCFLAGS += "-Wl\,-rpath-link\,$(TARGET_FS)/usr/libnvidia"
            CCFLAGS += -I$(TARGET_FS)/../include
        endif
    endif
endif

ifdef TARGET_OVERRIDE # cuda toolkit targets override
    NVCCFLAGS += -target-dir $(TARGET_OVERRIDE)
endif

# Install directory of different arch
CUDA_INSTALL_TARGET_DIR :=
ifeq ($(TARGET_ARCH)-$(TARGET_OS),armv7l-linux)
    CUDA_INSTALL_TARGET_DIR = targets/armv7-linux-gnueabihf/
else ifeq ($(TARGET_ARCH)-$(TARGET_OS),aarch64-linux)
    CUDA_INSTALL_TARGET_DIR = targets/aarch64-linux/
else ifeq ($(TARGET_ARCH)-$(TARGET_OS),sbsa-linux)
    CUDA_INSTALL_TARGET_DIR = targets/sbsa-linux/
else ifeq ($(TARGET_ARCH)-$(TARGET_OS),armv7l-android)
    CUDA_INSTALL_TARGET_DIR = targets/armv7-linux-androideabi/
else ifeq ($(TARGET_ARCH)-$(TARGET_OS),aarch64-android)
    CUDA_INSTALL_TARGET_DIR = targets/aarch64-linux-androideabi/
else ifeq ($(TARGET_ARCH)-$(TARGET_OS),armv7l-qnx)
    CUDA_INSTALL_TARGET_DIR = targets/ARMv7-linux-QNX/
else ifeq ($(TARGET_ARCH)-$(TARGET_OS),aarch64-qnx)
    CUDA_INSTALL_TARGET_DIR = targets/aarch64-qnx/
else ifeq ($(TARGET_ARCH),ppc64le)
    CUDA_INSTALL_TARGET_DIR = targets/ppc64le-linux/
endif

# Debug build flags
ifeq ($(dbg),1)
      NVCCFLAGS += -g -G
      BUILD_TYPE := debug
else
      BUILD_TYPE := release
endif

ALL_CCFLAGS :=
ALL_CCFLAGS += $(NVCCFLAGS)
ALL_CCFLAGS += $(EXTRA_NVCCFLAGS)
ALL_CCFLAGS += $(addprefix -Xcompiler ,$(CCFLAGS))
ALL_CCFLAGS += $(addprefix -Xcompiler ,$(EXTRA_CCFLAGS))

SAMPLE_ENABLED := 1

ALL_LDFLAGS :=
ALL_LDFLAGS += $(ALL_CCFLAGS)
ALL_LDFLAGS += $(addprefix -Xlinker ,$(LDFLAGS))
ALL_LDFLAGS += $(addprefix -Xlinker ,$(EXTRA_LDFLAGS))

# Common includes and paths for CUDA
INCLUDES  := -I../../../Common
LIBRARIES :=

################################################################################

# Gencode arguments
ifeq ($(TARGET_ARCH),$(filter $(TARGET_ARCH),armv7l aarch64 sbsa))
SMS ?= 53 61 70 72 75 80 86 87 90
else
#SMS ?= 35 37 50 52 60 61 70 75 80 86 90
SMS ?= 50 52 60 61 70 75 80 86 90
endif

ifeq ($(SMS),)
$(info >>> WARNING - no SM architectures have been specified - waiving sample <<<)
SAMPLE_ENABLED := 0
endif

ifeq ($(GENCODE_FLAGS),)
# Generate SASS code for each SM architecture listed in $(SMS)
$(foreach sm,$(SMS),$(eval GENCODE_FLAGS += -gencode arch=compute_$(sm),code=sm_$(sm)))

# Generate PTX code from the highest SM architecture in $(SMS) to guarantee forward-compatibility
HIGHEST_SM := $(lastword $(sort $(SMS)))
ifneq ($(HIGHEST_SM),)
GENCODE_FLAGS += -gencode arch=compute_$(HIGHEST_SM),code=compute_$(HIGHEST_SM)
endif
endif

#ALL_CCFLAGS += --threads 0 --std=c++11

ifeq ($(SAMPLE_ENABLED),0)
EXEC ?= @echo "[@]"
endif

################################################################################

GPP := g++-11

SDL2 := `sdl2-config --cflags --libs`
LIBUSB := `pkg-config --libs --cflags libusb-1.0` -ljpeg


build := ./build_files
tests  := ..
src    := ../../../src
util   := $(src)/util
app    := $(src)/app
input  := $(src)/input
sdl    := $(src)/sdl
res    := $(src)/resources
uvc    := $(src)/uvc
simage := $(src)/simage
cuda   := $(src)/cuda

tests_exe := $(build)/tests_exe


# resources
icon_h := $(res)/icon_64.h

# headers
defines_h := $(src)/defines.hpp
stopwatch_h := $(util)/stopwatch.hpp

# execute
execute_h := $(util)/execute.hpp
execute_h += $(defines_h)

# uvc
uvc_h := $(uvc)/libuvc.h


# input
input_h := $(input)/input.hpp

input_state_h := $(input)/input_state.hpp
input_state += $(input_h)

# sdl
sdl_include_h := $(sdl)/sdl_include.hpp
sdl_include_h += $(input_h)
sdl_include_h += $(icon_h)


# color_space
color_space_h := $(util)/color_space.hpp
color_space_h += $(defines_h)

# device
cuda_def_h := $(cuda)/cuda_def.cuh

device_h := $(cuda)/device.hpp
device_h += $(defines_h)

# simage
simage_platform_h := $(simage)/simage_platform.hpp
simage_platform_h += $(defines_h)

simage_cuda_h := $(simage)/simage_cuda.hpp
simage_cuda_h += $(simage_platform_h)
simage_cuda_h += $(device_h)


# app
app_h := $(app)/app.hpp
app_h += $(simage_platform_h)
app_h += $(input_h)


# tests_include
tests_include_h := $(tests)/tests_include.hpp
tests_include_h += $(simage_cuda_h)



# main
main_c := $(tests)/cuda_tests_main.cpp
main_c += $(app_h)
main_o := $(build)/cuda_tests_main.o
object_files := $(main_o)

# execute
execute_c := $(util)/execute.cpp
execute_c += $(execute_h)
execute_o := $(build)/execute.o
object_files += $(execute_o)

# uvc_simage
uvc_simage_c := $(uvc)/uvc_simage.cpp
uvc_simage_c += $(simage_platform_h)
uvc_simage_c += $(uvc_h)
uvc_simage_o := $(build)/uvc_simage.o
object_files += $(uvc_simage_o)


# sdl_input
sdl_input_c := $(sdl)/sdl_input.cpp
sdl_input_c += $(sdl_include_h)
sdl_input_c += $(input_state_h)
sdl_input_o := $(build)/sdl_input.o
object_files += $(sdl_input_o)

# sdl_render
sdl_render_c := $(sdl)/sdl_render_run.cpp
sdl_render_c += $(sdl_include_h)
sdl_render_c += $(app_h)
sdl_render_c += $(stopwatch_h)
sdl_render_o := $(build)/sdl_render.o
object_files += $(sdl_render_o)


# device
device_c     := $(cuda)/device.cu
device_c     += $(device_h)
device_c     += $(cuda_def_h)
device_o     := $(build)/device.o
object_files += $(device_o)


# simage_platform
simage_platform_c := $(simage)/simage_platform.cpp
simage_platform_c += $(simage_platform_h)
simage_platform_c += $(execute_h)
simage_platform_c += $(color_space_h)
simage_platform_o := $(build)/simage_platform.o
object_files += $(simage_platform_o)

# simage_cuda
simage_cuda_c := $(simage)/simage_cuda.cu
simage_cuda_c += $(cuda_def_h)
simage_cuda_c += $(simage)/simage_cuda.cpp
simage_cuda_c += $(simage_cuda_h)
simage_cuda_c += $(execute_h)
simage_cuda_o := $(build)/simage_cuda.o
object_files += $(simage_cuda_o)


# device_buffer_tests
device_buffer_tests_c := $(tests)/device_buffer_tests.cpp
device_buffer_tests_c += $(tests_include_h)
device_buffer_tests_o := $(build)/device_buffer_tests.o
object_files += $(device_buffer_tests_o)

# device_copy_tests
device_copy_tests_c := $(tests)/device_copy_tests.cpp
device_copy_tests_c += $(tests_include_h)
device_copy_tests_o := $(build)/device_copy_tests.o
object_files += $(device_copy_tests_o)

# make_view_tests
make_view_tests_c := $(tests)/make_view_tests.cpp
make_view_tests_c += $(tests_include_h)
make_view_tests_o := $(build)/make_view_tests.o
object_files += $(make_view_tests_o)

# map_rgb_tests
map_rgb_tests_c := $(tests)/map_rgb_tests.cpp
map_rgb_tests_c += $(tests_include_h)
map_rgb_tests_o := $(build)/map_rgb_tests.o
object_files += $(map_rgb_tests_o)

# map_gray_tests
map_gray_tests_c := $(tests)/map_gray_tests.cpp
map_gray_tests_c += $(tests_include_h)
map_gray_tests_o := $(build)/map_gray_tests.o
object_files += $(map_gray_tests_o)

# map_hsv_tests
map_hsv_tests_c := $(tests)/map_hsv_tests.cpp
map_hsv_tests_c += $(tests_include_h)
map_hsv_tests_o := $(build)/map_hsv_tests.o
object_files += $(map_hsv_tests_o)

# map_yuv_tests
map_yuv_tests_c := $(tests)/map_yuv_tests.cpp
map_yuv_tests_c += $(tests_include_h)
map_yuv_tests_o := $(build)/map_yuv_tests.o
object_files += $(map_yuv_tests_o)


# flags
INCLUDES  :=
#INCLUDES += -I /usr/include/libusb-1.0

GPP_LIBS := -ltbb -pthread $(LIBUSB)

NVCC_LIBS := -ltbb $(LIBUSB)

GPP_FLAGS := -std=c++20
#GPP_FLAGS += -O3
#GPP_FLAGS += -DNDEBUG

NVCC_FLAGS := -std=c++17
#NVCC_FLAGS += -DNDEBUG


# build rules

$(main_o): $(main_c)
	@echo "\n main"
	$(GPP) $(GPP_FLAGS) -o $@ -c $<

$(execute_o): $(execute_c)
	@echo "\n execute"
	$(GPP) $(GPP_FLAGS) -o $@ -c $<

$(uvc_simage_o): $(uvc_simage_c)
	@echo "\n uvc_simage"
	$(GPP) $(GPP_FLAGS) -o $@ -c $< $(LIBUSB)


$(sdl_input_o): $(sdl_input_c)
	@echo "\n sdl_input"
	$(GPP) $(GPP_FLAGS) -o $@ -c $<

$(sdl_render_o): $(sdl_render_c)
	@echo "\n sdl_render"
	$(GPP) $(GPP_FLAGS) -o $@ -c $<


$(simage_platform_o): $(simage_platform_c)
	@echo "\n simage_platform"
	$(GPP) $(GPP_FLAGS) -o $@ -c $< $(GPP_LIBS)

$(device_o): $(device_c)
	@echo "\n device"
	$(EXEC) $(NVCC) $(NVCC_FLAGS) $(INCLUDES) $(ALL_CCFLAGS) $(GENCODE_FLAGS) -o $@ -c $<

$(simage_cuda_o): $(simage_cuda_c)
	@echo "\n simage_cuda"
	$(EXEC) $(NVCC) $(NVCC_FLAGS) $(INCLUDES) $(ALL_CCFLAGS) $(GENCODE_FLAGS) -o $@ -c $<


$(device_buffer_tests_o): $(device_buffer_tests_c)
	@echo "\n device_buffer_tests"
	$(EXEC) $(NVCC) $(NVCC_FLAGS) $(INCLUDES) $(ALL_CCFLAGS) $(GENCODE_FLAGS) -o $@ -c $<

$(device_copy_tests_o): $(device_copy_tests_c)
	@echo "\n device_copy_tests"
	$(EXEC) $(NVCC) $(NVCC_FLAGS) $(INCLUDES) $(ALL_CCFLAGS) $(GENCODE_FLAGS) -o $@ -c $<

$(make_view_tests_o): $(make_view_tests_c)
	@echo "\n make_view_tests"
	$(EXEC) $(NVCC) $(NVCC_FLAGS) $(INCLUDES) $(ALL_CCFLAGS) $(GENCODE_FLAGS) -o $@ -c $<

$(map_rgb_tests_o): $(map_rgb_tests_c)
	@echo "\n map_rgb_tests"
	$(EXEC) $(NVCC) $(NVCC_FLAGS) $(INCLUDES) $(ALL_CCFLAGS) $(GENCODE_FLAGS) -o $@ -c $<

$(map_gray_tests_o): $(map_gray_tests_c)
	@echo "\n map_gray_tests"
	$(EXEC) $(NVCC) $(NVCC_FLAGS) $(INCLUDES) $(ALL_CCFLAGS) $(GENCODE_FLAGS) -o $@ -c $<

$(map_hsv_tests_o): $(map_hsv_tests_c)
	@echo "\n map_hsv_tests"
	$(EXEC) $(NVCC) $(NVCC_FLAGS) $(INCLUDES) $(ALL_CCFLAGS) $(GENCODE_FLAGS) -o $@ -c $<

$(map_yuv_tests_o): $(map_yuv_tests_c)
	@echo "\n map_yuv_tests"
	$(EXEC) $(NVCC) $(NVCC_FLAGS) $(INCLUDES) $(ALL_CCFLAGS) $(GENCODE_FLAGS) -o $@ -c $<


$(tests_exe): $(object_files)
	@echo "\n cuda_tests"
	$(EXEC) $(NVCC) $(NVCC_FLAGS) $(ALL_LDFLAGS) $(GENCODE_FLAGS) -o $@ $+ $(NVCC_LIBS) $(SDL2)


build: $(tests_exe)

run: build
	$(tests_exe)

clean:
	rm -rfv $(build)/*

setup:
	mkdir -p $(build)